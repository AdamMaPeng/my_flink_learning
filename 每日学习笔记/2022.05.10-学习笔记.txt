                                             2022.05.10 学习笔记
1、统计 url 访问的 TopN
    使用状态的地方：ListState
    没来到窗口的一个数据，就将其保存起来，维持这个状态，在我们想要使用的时候，这个状态都可被调用
    在 url 这个需求中，使用 ListState 就是要将每次到达窗口的 url 保存到 List 中，在后续进行统计

2、针对 app 端 和 third-parth 端 的支付信息进行平账
    使用到状态的地方：
        在处理 app 端的时候，没法同时处理 third-party ，但是我们又需要知道 third-party当前的状态
       那么此时就需要用到状态

       可定义状态变量，用来保存已经到达的事件
       ValueState ： 用来保存值的状态

       当使用 stream1.connect(stream2)
                    .keyBy(s1 -> s1.key, s2 -> s2.key)
             使用这样的方式，进行合流后，在设置状态的时候，状态也是 keyBy 后的状态

3、状态：
    对于状态的使用，不能直接 new 一个 xxx 状态，而是需要通过 运行时上下文Context 获取
    运行时上下文Context ：必须当前任务已经启动，有了任务实例的时候，才会有有运行时上下文，所以需要在open 生命周期里获取 运行时上下文。

    在 open(Configuration parameters){
        getRuntimeContext().getState(
            new ListStataDescriptor<>() : 获取 ListState 的状态
            new ValueStateDescriptor<>(): 获取 ValueState的状态
        )
    }

第八章 多流转换：
0、分流：
    在 process 函数中 ，使用多个侧输出流，完成分流，

1、合流：
    union ： 多条流中的数据类型相同时，可以是 调用 dataStream1.union(dataStream2)
        对于多个流中的数据类型相同时， 对多个流的合并采用 Union ，合并后的结果为 DataStream

            1）可以进行多条流的合并

    connect : 多条流中的数据类型不相同时，可以使用 d1.connect(d2) --》 ConnectStream
                然后需要将返回的结果调用 map/ flatmap/ process 进行转换
                例如 map算子： .map(new CoMapFunction<IN1, IN2, OUT>(){})
                将流1  中的数据，流2 中的数据进行转换，最终转换成一个相同的数据类型--》 才能
                得到 DataStream

             1） 只能进行两条流的合并

2、合流（四） -- 广播流
   BroadCastConnectedStream bcs = stream1.connect(BroadCastStream broadCastStream)
   应用场景： 动态定义某些配置项目的场景
         比如某些配置项，在实时的发生变化，例如阈值，我们希望这个变化的配置项不会影响到我们正常的业务，
         这时就可以通过 BroadCastStream 来完成动态配置的捕捉，从而实现相应的功能

   广播流是如何将配置项广播给下游的数据呢？
        通过状态，将配置项保存成 BrocastState（底层是一个 MapStateDescriptor  ）

   1）获取 BroadcastStream
       BroadcastStream  ruleBroadcastStream =  DataStream.broadcast(final MapStateDescriptor<?,?>... broadcastStateDescriptor )
   2) 将 BroadcastStream 和 DataStream 进行联合
        BroadcastConnectedStream broadcastConnectedStream = stream.connect(ruleBroadcastStream)
        （顺序必须是 DataStream 去 connect BroadcastStream ）
   3） BroadcastConnectedStream 可以调用 process（BroadcastProcessFunction / KeyedBroadcastProcessFunction）方法返回 SingleOutputStreamOperator


8.3 基于时间的合流 ---- 双流联结（Join）
双流 Join（一） ：
8.3.1 窗口 联结(Window Join)
    1）只能是同窗口内满足如下联结条件的数据才能进行联结
    2）写法和 sql 中的 join 相同
    3）只有按照如下固定的方法进行使用
    stream1.join(stream2)
     .where(<KeySelector>)
     .equalTo(<KeySelector>)
     .window(<WindowAssigner>)
     .apply(<JoinFunction>)

    JoinedStream<T1,T2> js = dataStream1.join(dataStream2)
        只有一个 where（） 方法可以被调用

    可以替代 connect（），
        减少了定义状态，对 流1 数据的处理，对流2 数据的处理，但是也缺少了富函数相关的功能
        两条流一国两制
        自已定义定时器


8.3.2 间隔联结（Interval Join）
    只有按照如下固定的方法进行使用

    stream1
     .keyBy(<KeySelector>)
     .intervalJoin(stream2.keyBy(<KeySelector>))
     .between(Time.milliseconds(-2), Time.milliseconds(1))
     .process (new ProcessJoinFunction<Integer, Integer, String(){
     @Override
     public void processElement(Integer left, Integer right, Context ctx,
    Collector<String> out) {
     out.collect(left + "," + right);
     }
     });

     两个 KeyedStream
            .intervalJoin()
            .between() 给定间隔的区间
            .process()  intervalJoin 后的操作


     使用场景：
        1、之前写过的 账单对账，原来的方式是通过 connect（）将来两条流进行联结，定义状态，生成定时器等操作，完成功能，
            使用 intervalJoin 也可以完成功能，只是intervalJoin 就和 两张表Join 一样，没有匹配上的数据，没法展示，这对于实际项目的风控报警，就没法实现了
        2、电商项目中，用户下了单，我们需要知道他在下单的过程中，都有做过哪些行文，通过将下单和用户浏览的网页、收藏等内容进行 intervalJoin 后，对于后续的 用户推荐，实时画像更加有帮助

8.3.3 窗口同组联结（Window coGroup）
    对于 coGroup 而言，也是通过 DataStream.coGroup() 进行 获取
    高级版本的 window Join ，windowJoin 只可以进行key 相同的 笛卡尔积输出
    coGroup 将两个流中的数据，每个流的数据单独封装成了 iterator 对象，
    针对两个 iterator 对象的相应操作，可以完成 window Join 的内联接操作，当然也可以
    完成其他的外联连等的操作

    用法：同 window Join ，只是将 join 换成了 coGroup
        stream1.coGroup(stream2)
             .where(<KeySelector>)
             .equalTo(<KeySelector>)
             .window(<WindowAssigner>)
             .apply(<JoinFunction>)

    底层：形式类似于 flatJoinFunction
         void coGroup(Iterable<IN1> first, Iterable<IN2> second, Collector<O> out) throws Exception;

第 9 章 状态编程
9.1 Flink 中的状态
    官网中对Flink 的定义： 有状态的流式计算
    1、状态 ： 就是之前的数据 或之前数据计算的结果进行保存。
            每个任务进行计算处理时，可以基于当前数据直接转换得到输出结果；也可以依赖一些其他数据。这些由一个任务维护，并且用来计算输出结果的
            所有数据，就叫做这个任务的状态

    2、获取状态：能获取到状态的，只能从 运行时上下文中获取状态，所以必须通过富函数及其子类的对象进行获取
    3.根据状态的有无，将算子分为：
        有状态的算子：执行任务时，除了当前的数据，还需要一些其他数据来得到结果，这个其他数据，就是所谓的状态，用到状态的算子，就叫有状态的算子
            所有的窗口算子（窗口要收集数据，将数据保留，必然存在状态），
            所有的 ProcessFunction 及其子类（因为所有的ProcessFunction都继承自AbstractRichFunction）
            reduce、aggregate

        无状态的算子：只需要关注每个独立的事件，根据当前输入的结果直接转换输出结果
            map / fliter/ flatMap

    4、所有的算子都有其富函数类 ，所以并不是说 无状态算子就一定不能有状态，状态可以自定义，只不过获取状态必须从 运行时上下文中 Context 中获取
        也就是通过如下的方式：
            getRuntimeContext().getState(
                                new ValueStateDescriptor<Tuple3<String, String, Long>>()

9.1.2 状态的管理
    1、状态的管理是基于 key 的。
        比如 wordCount ，如果每个分区只有一个 状态，默认的分区规则下，keyBy 后，可能多个不同的key 分到同一个分区中，那么计算wordCount 是，针对不同的
        key 则会不进行区分，而进行count ，所以状态是基于key 的
    2、状态也是要持久化的，保证了容错性
        当发生错误，进行恢复的时候，按照Flink 将状态保存到内存中，如果只是保存在内存中，如果发生故障，则发生故障的节点的状态就丢失了，所以Flink
        的状态也是进行持久化保存的
    3、分布式扩展中，状态也是要进行重组调增的。
        当数据量特别大，集群资源不足的时候，需要进行横向扩展，如果状态不发生改变，只将数据发送到新增加的节点上，那么效率也就没法保障，所以对应的
        状态也是需要进行重组调整的

9.1.3 状态的分类
  1、托管状态（Managed State）和 原始状态（Raw State）
    1、托管状态（Managed State）
        1） 由 Flink 统一管理的，由Flink 的 运行时 Runtime 来托管的
        2） 状态的存储访问、故障恢复、重组等都是由 Flink 实现，我们只要调用接口即可
        3） 配置容错机制后，状态会自动持久化保存，并在发生故障时自动恢复
        4） 应用横向扩展时，状态会自动地重组分配到所有的子任务实例上。
        5） 根据具体的状态内容，分为
                值状态（ValueState）
                列表状态（ListState）
                映射状态（MapState）
                聚合状态（AggregateState）
            内部支持各种数据类型。

        托管状态 又可以分为两大类： 算子状态（Operator State） 和 按键分区状态（Keyed State）


    2、原始状态（Raw State） （不推荐使用）
        1）自定义的，相当于开辟一块内存，需要我们自己管理，实现状态的序列化和故障恢复
        2）Flink 将 原始状态 当作最原始的字节（Byte）数组来存储。

  2、算子状态（Operator State） 和按键分区状态（Keyed State）

    Keyed State 必须基于Keyed Stream ，所以必须先进行 Key by

    按键分区的四种状态
       值状态（ValueState）
       列表状态（ListState）
       映射状态（MapState）
       聚合状态（AggregateState）


----------------------------------------------------------------------------------------------------------------------
1.并行子任务： 每个算子都可以设置并行度，在不同的 slot 上并行运行多个实例




















































